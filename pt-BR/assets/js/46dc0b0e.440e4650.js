"use strict";(self.webpackChunkwppconnect_team_github_io=self.webpackChunkwppconnect_team_github_io||[]).push([[41036],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},64735:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:2},s="Creating a Client",i={unversionedId:"tutorial/basics/creating-client",id:"tutorial/basics/creating-client",title:"Creating a Client",description:"To start using Wppconnect Bot, you need to create a file and call the {@link create} method.\\",source:"@site/docs/tutorial/basics/creating-client.md",sourceDirName:"tutorial/basics",slug:"/tutorial/basics/creating-client",permalink:"/pt-BR/docs/tutorial/basics/creating-client",draft:!1,editUrl:"https://github.com/wppconnect-team/wppconnect-team.github.io/tree/main/docs/tutorial/basics/creating-client.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Installation",permalink:"/pt-BR/docs/tutorial/basics/installation"},next:{title:"Receiving Messages",permalink:"/pt-BR/docs/tutorial/basics/receiving-messages"}},l={},c=[{value:"Multi sessions",id:"multi-sessions",level:2},{value:"Passing options on create",id:"passing-options-on-create",level:2},{value:"Callback Status Session",id:"callback-status-session",level:3},{value:"Phone connection verification",id:"phone-connection-verification",level:3},{value:"Exporting QR Code",id:"exporting-qr-code",level:3},{value:"Saving Session Token",id:"saving-session-token",level:3},{value:"Multidevice (BETA)",id:"multidevice-beta",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-a-client"},"Creating a Client"),(0,o.kt)("p",null,"To start using ",(0,o.kt)("inlineCode",{parentName:"p"},"Wppconnect Bot"),", you need to create a file and call the {@link create} method.\\\nThat method returns an ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise")," of {@link Whatsapp}."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Supports ES6\n// import { create, Whatsapp } from '@wppconnect-team/wppconnect';\nconst wppconnect = require('@wppconnect-team/wppconnect');\n\nwppconnect\n  .create()\n  .then((client) => start(client))\n  .catch((error) => console.log(error));\n")),(0,o.kt)("h2",{id:"multi-sessions"},"Multi sessions"),(0,o.kt)("p",null,"If you want to start more than one session, for example,\nin case you have different departments in your project,\nthen you had to specify it in your code like in that example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Init sales whatsapp bot\nwppconnect.create({session: 'sales'}).then((client) => startClient(client));\n\n// Init support whatsapp bot\nwppconnect.create({session: 'support'}).then((client) => startSupport(client));\n")),(0,o.kt)("h2",{id:"passing-options-on-create"},"Passing options on create"),(0,o.kt)("p",null,"The {@link create} method third parameter can have the following optional parameters (see all parameters in {@link CreateOptions}):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"wppconnect.create({\n    session: 'sessionName', //Pass the name of the client you want to start the bot\n    catchQR: (base64Qrimg, asciiQR, attempts, urlCode) => {\n      console.log('Number of attempts to read the qrcode: ', attempts);\n      console.log('Terminal qrcode: ', asciiQR);\n      console.log('base64 image string qrcode: ', base64Qrimg);\n      console.log('urlCode (data-ref): ', urlCode);\n    },\n    statusFind: (statusSession, session) => {\n      console.log('Status Session: ', statusSession); //return isLogged || notLogged || browserClose || qrReadSuccess || qrReadFail || autocloseCalled || desconnectedMobile || deleteToken\n      //Create session wss return \"serverClose\" case server for close\n      console.log('Session name: ', session);\n    },\n    headless: true, // Headless chrome\n    devtools: false, // Open devtools by default\n    useChrome: true, // If false will use Chromium instance\n    debug: false, // Opens a debug session\n    logQR: true, // Logs QR automatically in terminal\n    browserWS: '', // If u want to use browserWSEndpoint\n    browserArgs: [''], // Parameters to be added into the chrome browser instance\n    puppeteerOptions: {}, // Will be passed to puppeteer.launch\n    disableWelcome: false, // Option to disable the welcoming message which appears in the beginning\n    updatesLog: true, // Logs info updates automatically in terminal\n    autoClose: 60000, // Automatically closes the wppconnect only when scanning the QR code (default 60 seconds, if you want to turn it off, assign 0 or false)\n    tokenStore: 'file', // Define how work with tokens, that can be a custom interface\n    folderNameToken: './tokens', //folder name when saving tokens\n    // BrowserSessionToken\n    // To receive the client's token use the function await clinet.getSessionTokenBrowser()\n    sessionToken: {\n      WABrowserId: '\"UnXjH.....\"',\n      WASecretBundle: '{\"key\":\"+i/nRgWJ....\",\"encKey\":\"kGdMR5t....\",\"macKey\":\"+i/nRgW....\"}',\n      WAToken1: '\"0i8....\"',\n      WAToken2: '\"1@lPpzwC....\"',\n    }\n  })\n  .then((client) => start(client))\n  .catch((error) => console.log(error));\n")),(0,o.kt)("h3",{id:"callback-status-session"},"Callback Status Session"),(0,o.kt)("p",null,"More details in {@link StatusFind}"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Status"),(0,o.kt)("th",{parentName:"tr",align:null},"Condition"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"isLogged")),(0,o.kt)("td",{parentName:"tr",align:null},"When the user is already logged in to the browser")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"notLogged")),(0,o.kt)("td",{parentName:"tr",align:null},"When the user is not connected to the browser, it is necessary to scan the QR code through the cell phone in the option WhatsApp Web")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"browserClose")),(0,o.kt)("td",{parentName:"tr",align:null},"If the browser is closed this parameter is returned")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"qrReadSuccess")),(0,o.kt)("td",{parentName:"tr",align:null},"If the user is not logged in, the QR code is passed on the terminal a callback is returned. After the correct reading by cell phone this parameter is returned")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"qrReadFail")),(0,o.kt)("td",{parentName:"tr",align:null},"If the browser stops when the QR code scan is in progress, this parameter is returned")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"autocloseCalled")),(0,o.kt)("td",{parentName:"tr",align:null},"The browser was closed using the autoClose command")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"desconnectedMobile")),(0,o.kt)("td",{parentName:"tr",align:null},"Client has disconnected in to mobile")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"serverClose")),(0,o.kt)("td",{parentName:"tr",align:null},"Client has disconnected in to wss")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"deleteToken")),(0,o.kt)("td",{parentName:"tr",align:null},"If you pass true within the function ",(0,o.kt)("inlineCode",{parentName:"td"},"client.getSessionTokenBrowser(true)"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const wppconnect = require('@wppconnect-team/wppconnect');\nwppconnect\n  .create({\n    session: 'sessionName',\n    statusFind: (statusSession, session) => {\n      // return: isLogged || notLogged || browserClose || qrReadSuccess || qrReadFail || autocloseCalled || desconnectedMobile || deleteToken\n      console.log('Status Session: ', statusSession);\n      // create session wss return \"serverClose\" case server for close\n      console.log('Session name: ', session);\n    },\n  })\n  .then((client) => start(client))\n  .catch((error) => console.log(error));\n")),(0,o.kt)("h3",{id:"phone-connection-verification"},"Phone connection verification"),(0,o.kt)("p",null,"To enforce the phone connection verification, you can use the code below or check the documentation {@link Whatsapp.startPhoneWatchdog}.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// To start with default interval.\nclient.startPhoneWatchdog();\n\n// To start with custom interval.\nclient.startPhoneWatchdog(30000); // 30s\n\n// To stop.\nclient.stopPhoneWatchdog();\n")),(0,o.kt)("h3",{id:"exporting-qr-code"},"Exporting QR Code"),(0,o.kt)("p",null,"By default, QR code will appear on the terminal. If you need to pass the QR\nsomewhere else heres how (See {@link CatchQRCallback}):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const fs = require('fs');\nconst wppconnect = require('@wppconnect-team/wppconnect');\n\nwppconnect\n  .create({\n    session: 'sessionName',\n    catchQR: (base64Qr, asciiQR) => {\n      console.log(asciiQR); // Optional to log the QR in the terminal\n      var matches = base64Qr.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\n        response = {};\n\n      if (matches.length !== 3) {\n        return new Error('Invalid input string');\n      }\n      response.type = matches[1];\n      response.data = new Buffer.from(matches[2], 'base64');\n\n      var imageBuffer = response;\n      require('fs').writeFile(\n        'out.png',\n        imageBuffer['data'],\n        'binary',\n        function (err) {\n          if (err != null) {\n            console.log(err);\n          }\n        }\n      );\n    },\n    logQR: false,\n  })\n  .then((client) => start(client))\n  .catch((error) => console.log(error));\n")),(0,o.kt)("h3",{id:"saving-session-token"},"Saving Session Token"),(0,o.kt)("p",null,"Read the {@link TokenStore}"),(0,o.kt)("h3",{id:"multidevice-beta"},"Multidevice (BETA)"),(0,o.kt)("p",null,"To use multidevice account, you have to setup a fixed user data dir for browser to keep it logged,\nbecause WhatsApp changed the way of autentication."),(0,o.kt)("p",null,"To setup this, you can use the example bellow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"wppconnect\n  .create({\n    // ...\n    session: 'mySessionName',\n    puppeteerOptions: {\n      userDataDir: './tokens/mySessionName', // or your custom directory\n    },\n    // ...\n  })\n  .then((client) => start(client))\n  .catch((error) => console.log(error));\n")))}d.isMDXComponent=!0}}]);