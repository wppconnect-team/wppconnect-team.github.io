"use strict";(self.webpackChunkwppconnect_team_github_io=self.webpackChunkwppconnect_team_github_io||[]).push([[109],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=s(t),f=r,m=g["".concat(c,".").concat(f)]||g[f]||u[f]||i;return t?o.createElement(m,a(a({ref:n},p),{},{components:t})):o.createElement(m,a({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},89671:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var o=t(87462),r=t(63366),i=(t(67294),t(3905)),a=["components"],l={sidebar_position:4},c="Configuring the logger",s={unversionedId:"tutorial/basics/configuring-logger",id:"tutorial/basics/configuring-logger",title:"Configuring the logger",description:"Wppconnect Bot use winston package for log management.",source:"@site/docs/tutorial/basics/configuring-logger.md",sourceDirName:"tutorial/basics",slug:"/tutorial/basics/configuring-logger",permalink:"/docs/tutorial/basics/configuring-logger",draft:!1,editUrl:"https://github.com/wppconnect-team/wppconnect-team.github.io/tree/main/docs/tutorial/basics/configuring-logger.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorial",previous:{title:"Receiving Messages",permalink:"/docs/tutorial/basics/receiving-messages"},next:{title:"Basic Functions (usage)",permalink:"/docs/tutorial/basics/basic-functions"}},p={},u=[{value:"Default Log level",id:"default-log-level",level:2},{value:"Using a custon logger",id:"using-a-custon-logger",level:2},{value:"Log to file",id:"log-to-file",level:2}],g={toc:u};function f(e){var n=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuring-the-logger"},"Configuring the logger"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Wppconnect Bot")," use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston"},"winston")," package for log management."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"wppconnect.defaultLogger")," is a instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"winston.createLogger"),"."),(0,i.kt)("h2",{id:"default-log-level"},"Default Log level"),(0,i.kt)("p",null,"The default log level is ",(0,i.kt)("inlineCode",{parentName:"p"},"info")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Supports ES6\n// import * as wppconnect from '@wppconnect-team/wppconnect';\nconst wppconnect = require('@wppconnect-team/wppconnect');\n\n// Levels: 'error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly'\n// All logs: 'silly'\nwppconnect.defaultLogger.level = 'silly';\n\n// If you want stop console logging\nwppconnect.defaultLogger.transports.forEach((t) => (t.silent = true));\n")),(0,i.kt)("h2",{id:"using-a-custon-logger"},"Using a custon logger"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Supports ES6\n// import * as wppconnect from '@wppconnect-team/wppconnect';\n// import * as winston from 'winston';\nconst wppconnect = require('@wppconnect-team/wppconnect');\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    //\n    // - Write all logs with level `error` and below to `error.log`\n    // - Write all logs with level `info` and below to `combined.log`\n    //\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n  ],\n});\n\nwppconnect\n  .create({\n    session: 'sessionName',\n    logger: logger,\n  })\n  .then((client) => {\n    start(client);\n  })\n  .catch((erro) => {\n    console.log(erro);\n  });\n")),(0,i.kt)("h2",{id:"log-to-file"},"Log to file"),(0,i.kt)("p",null,"By default, wppconnect use the Console transport for logging."),(0,i.kt)("p",null,"If you want to save the log to a file, you can configure\nusing the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston#transports"},"winston transport")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Supports ES6\n// import * as wppconnect from '@wppconnect-team/wppconnect';\n// import * as winston from 'winston';\nconst wppconnect = require('@wppconnect-team/wppconnect');\nconst winston = require('winston');\n\n// Optional: Remove all default transports\nwppconnect.defaultLogger.clear(); // Remove all transports\n\n// Create a file transport\nconst files = new winston.transports.File({ filename: 'combined.log' });\nwppconnect.defaultLogger.add(files); // Add file transport\n\n// Optinal: create a custom console with error level\nconst console = new winston.transports.Console({ level: 'erro' });\nwppconnect.defaultLogger.add(console); // Add console transport\n\n// Optinal: Remove the custom transport\nwppconnect.defaultLogger.remove(console); // Remove console transport\n")))}f.isMDXComponent=!0}}]);